# 이진 탐색 - 반복문
# '이진 탐색(Binary Search)' 알고리즘을 사용해서 어떤 원소가 리스트 안에 포함되어 있는지 확인하려고 합니다. 이진 탐색 알고리즘은 선형 탐색 알고리즘과 달리, 정렬된 리스트를 전제로 합니다. 정렬된 리스트가 아니면 이 알고리즘은 적용이 불가능합니다.

# 왜 이 알고리즘의 이름이 '이진 탐색'일까요? 1회 비교를 거칠 때마다 탐색 범위가 절반으로 줄어들기 때문입니다.

# 예시
# 예를 들어 [1, 2, 3, 5, 8, 13, 21, 34, 55]에서 3을 찾는 경우, 알고리즘의 진행 방식은 다음과 같습니다:

# 시도 1
# 리스트의 첫 번째 인덱스와 마지막 인덱스의 값을 합하여 2로 나눈 후, 중간 인덱스로 지정합니다. 그리고 그 인덱스에 해당하는 값이 3인지 확인해봅니다.

# 이 경우 리스트의 첫 번째 인덱스는 0이고 마지막 인덱스는 8이므로, 중간 인덱스는 4이고 해당 원소는 8입니다.

# 찾고자 하는 원소(3)는 중간 원소(8)에 비해 작습니다. 리스트는 정렬되어있으므로, 인덱스 4~8은 탐색 범위에서 제외됩니다. 탐색 범위가 절반으로 줄어든 것이죠.

# 시도 2
# 탐색 범위는 이제 인덱스 0~3입니다. 탐색 범위의 리스트의 첫 번째 인덱스는 0이고 마지막 인덱스는 3이므로, 중간 인덱스는 (0 + 3) // 2인 1입니다. 인덱스 1에 해당 원소는 2이죠.

# 찾고자 하는 원소(3)는 중간 원소(2)에 비해 큽니다. 리스트는 정렬되어 있으므로, 인덱스 0~1은 탐색 범위에서 제외됩니다. 탐색 범위가 다시 절반으로 줄어든 것이죠.

# 시도 3
# 탐색 범위는 이제 인덱스 2~3입니다. 탐색 범위의 리스트의 첫 번째 인덱스는 2이고 마지막 인덱스는 3이므로, 중간 인덱스는 (2 + 3) // 2인 2입니다. 인덱스 2에 해당하는 원소의 값은 3이죠.

# 찾고자 하는 원소(3)는 중간에 해당하는 원소(3)와 일치합니다. 값을 찾았으니, 인덱스 2를 리턴해주며, 알고리즘을 종료합니다.

# 재귀 대신 반복문을 사용하셔야 합니다. 재귀로 이진 탐색을 구현하는 것은 바로 다음 과제입니다!

# 템플릿 (Template)
# def binary_search(element, some_list):
#     # 코드를 작성하세요.

# print(binary_search(2, [2, 3, 5, 7, 11]))
# print(binary_search(0, [2, 3, 5, 7, 11]))
# print(binary_search(5, [2, 3, 5, 7, 11]))
# print(binary_search(3, [2, 3, 5, 7, 11]))
# print(binary_search(11, [2, 3, 5, 7, 11]))
# 0
# None
# 2
# 1
# 4
# <주의> 'if 원소 in 리스트'의 'in' 키워드 또는 'if 원소 not in 리스트'의 'not in' 키워드는 사용하면 안됩니다. 왜냐하면 'in' 키워드는 탐색 알고리즘 자체의 결과를 불러오기 때문에, 해당 키워드를 사용하지 않고 알고리즘을 직접 구현하셔야 합니다.

def binary_search(element, some_list):
    # 코드를 작성하세요.
    index1 = 0
    index2 = len(some_list)     
    while index1 <= index2:
        if element == some_list[(index1 + index2) // 2]:
            return (index1 + index2) // 2
        elif element < some_list[(index1 + index2) // 2]:
            index2 = (index1 + index2) // 2 - 1
        else:
            index1 = (index1 + index2) // 2 + 1         


print(binary_search(2, [2, 3, 5, 7, 11]))
print(binary_search(0, [2, 3, 5, 7, 11]))
print(binary_search(5, [2, 3, 5, 7, 11]))
print(binary_search(3, [2, 3, 5, 7, 11]))
print(binary_search(11, [2, 3, 5, 7, 11]))