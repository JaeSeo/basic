(1) print문과 return문에 대한 설명입니다. 다음 중 틀린 설명을 모두 고르세요.

def calculate_seven():
    return int("5") + int(2.0)
    print("럭키 7을 출력합니다.")

calculate_seven()
7과 "럭키 7을 출력합니다."가 각각 출력됩니다.
7만 출력됩니다.
return문에 도달하면 함수는 중단되므로, "럭키 7을 출력합니다."는 dead code라고 불립니다.
(해설)

return문은 함수의 실행을 중단하기 때문에 파이썬은 어떠한 경우에도 calculate_seven 함수의 print문에 도달하지 못합니다. 이렇게 절대로 실행될 수 없는 줄을 dead code라고 부릅니다. 따라서 (1)번 보기는 틀린 설명이고 (3)번 보기는 옳은 설명입니다.

int("5")는 정수형 5이고, int(2.0)는 정수형 2이기 때문에 5 + 2의 결과값 7이 calculate_seven()에 리턴됩니다. 즉, 정수형 7이 calculate_seven()의 자리에 대체됩니다. 그러나 대체된 값을 출력하라는 명령이 없기 때문에, 아무 값도 출력되지 않습니다. 따라서 (2)번 보기는 틀린 설명입니다.

(1)번과 (2)번이 틀린 설명입니다.



(2) print문과 return문에 대한 설명입니다. 다음 중 틀린 설명을 모두 고르세요.

def sum(a, b):
    return a + b

def print_sum(a, b):
    print(a + b)

# 첫번째 명령
sum(2, 4)

# 두번째 명령
print(sum(2, 4))

# 세번째 명령
print_sum(2, 4)

# 네번째 명령
print(print_sum(2, 4))
첫 번째 명령의 리턴 값은 6이므로, 6이 출력됩니다.
두 번째 명령은 sum(2, 4)에 의해 리턴된 6의 값을 출력하라는 명령이므로, 6이 출력됩니다.
세 번째 명령은 print_sum 함수를 호출하는 명령이므로, 2와 4를 더한 6이 출력됩니다.
네 번째 명령에서 print_sum(2, 4)의 리턴 값은 6이므로, 6이 출력됩니다.
네 번째 명령은 리턴 값이 지정되어 있지 않기 때문에, None이 리턴됩니다.
네 번째 명령에 의해, 6과 None이 출력됩니다.
(해설)

첫 번째 명령의 리턴 값은 6이지만, 이를 출력하라는 명령이 없기 때문에 아무것도 출력되지 않습니다. 따라서 (1)번 보기는 틀린 설명입니다.

두 번째 명령은 return문에 의해 대체된 6의 값을 출력하라는 명령이므로, 6이 출력됩니다. 따라서 (2)번 보기는 옳은 설명입니다.

세 번째 명령은 print_sum이라는 함수를 호출하는 명령이고, 함수의 print문에 의해 파라미터의 값을 더한 6이 출력됩니다. 따라서 (3)번 보기는 옳은 설명입니다.

네 번째 명령에서 print_sum(2, 4)는 2 + 4의 결과값인 6을 출력합니다. 하지만 print_sum 함수는 리턴값이 지정되어 있지 않아 None이 리턴됩니다. 즉, print_sum(2, 4) 부분이 None으로 대체돼서 print(print_sum(2, 4))는 None을 출력합니다. 정리하자면, 네번째 명령은 6을 출력하고, None을 출력합니다. 따라서 (4)번 보기는 틀린 설명이고 (5)번과 (6)번 보기는 옳은 설명입니다.

(1)번과 (4)번이 틀린 설명입니다.



(3) global 변수에 대한 설명입니다. 다음 중 옳은 설명을 모두 고르세요.

def multiply_by_two():
    global x
    x = x * 2

def multiply_by_three():
    y = 2
    y = y * 3

x = 2
multiply_by_two()
print(x)

y = 2
multiply_by_three()
print(y)
multiply_by_two 함수 내부에 있는 x와, 함수 바깥에 정의된 x는 서로 다른 변수입니다.
파이썬을 실행하면, 4와 6이 출력됩니다.
파이썬을 실행하면, 4와 2가 출력됩니다.
파이썬을 실행하면, 4와 오류 메시지가 출력됩니다.
multiply_by_three 함수 내부에 있는 y와, 함수 바깥에 정의된 y는 서로 다른 변수입니다.
(해설)

multiply_by_two 함수의 첫번째 줄 global x는 함수 내부의 x와 함수 바깥의 x가 같은 변수라고 표시하는 명령입니다. 따라서 (1)번 보기는 틀린 설명입니다.

처음에 x는 2의 값을 갖고, multiply_by_two 함수가 불리면 global 변수인 x의 값은 두배로 늘어납니다. 첫번째 print문에 의해 4가 출력됩니다.

마찬가지로 처음에 y는 2의 값을 갖고, multiply_by_three 함수가 호출됩니다. 하지만 multiply_by_three 함수 안에 있는 y는 local 변수이기 때문에 함수 내부의 y는 6의 값을 갖게 되지만, 함수 바깥의 y는 여전히 2의 값을 갖고 있습니다. print(y)는 함수 바깥에 있으므로, 2가 출력됩니다.

정리하자면 4와 2가 출력되고, (3)번과 (5)번 보기가 옳은 설명입니다.

(3)번과 (5)번이 옳은 설명입니다.